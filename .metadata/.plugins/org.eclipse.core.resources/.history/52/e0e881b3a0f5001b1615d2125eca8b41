package com.springboot.springsecurityjwt;

import java.util.Date;
import java.util.Map;
import java.util.function.Function;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class JwtUtil {
private String secret_key="SECRET";

public String extractUsername(String token) {
	return extractClaim(token, Claims::getSubject);
}

public Date extractExpiration(String token) {
	return extractClaim(token, Claims::getExpiration);
}

public <T> T extractClaim(String token, Function<Claims,T> claimsResolver) {
	final Claims claims = extractAllClaims(token);
	return claimsResolver.apply(claims);
}

private Claims extractAllClaims(String token) {
	return Jwts.parser().setSigningKey(secret_key).parseClaimsJws(token).getBody();
}

private Boolean isTokenExpired(String token) {
	return extractExpiration(token).before(new Date());
}

private String createToken(Map<String,Object> claims, String subject) {
	return Jwts.builder()
			.setClaims(claims)
			.setSubject(subject)
			.setIssuedAt(new Date(System.currentTimeMillis()))
			.setExpiration(new Date(System.currentTimeMillis()+1000*60*60*10))
			.signWith(SignatureAlgorithm.HS256,secret_key).compact();
}

}
