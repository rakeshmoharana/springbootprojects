package com.springboot.springsecurityjwt;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {

	@Autowired
	JwtUtil jwtUtil;
	
	@Autowired
	MyUserDetailService userDetailsService;
	// This method will take the jwt token and validate if it is correct
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		System.out.println(this.getClass().toString() + " -- " + Thread.currentThread().getStackTrace()[1].getMethodName());
		final String header = request.getHeader("Authorization");
//		System.out.println("header"+header);
		String username = null;
		String jwt = null;
		if(header!=null && header.startsWith("Bearer")) {
//System.out.println("Bearer >> "+header);
			jwt = header.substring(7);
			username = jwtUtil.extractUsername(jwt);
//			System.out.println("username >> "+username);
		}
		
		if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null) {
			UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);
			System.out.println("username!=null && SecurityContextHolder.getContext().getAuthentication()==null"+header);
			if(jwtUtil.validateToken(jwt, userDetails)) {
				System.out.println("jwtUtil.validateToken(jwt, userDetails) >> "+header);
				UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken
				= new UsernamePasswordAuthenticationToken(userDetails, null,userDetails.getAuthorities());
				usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
				SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);
			}
		}
		filterChain.doFilter(request, response);
	}

}
